// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    now(),
    now(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserID = `-- name: GetUserID :one
SELECT id FROM users WHERE email = $1
`

func (q *Queries) GetUserID(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserID, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT id, created_at, updated_at, email, hashed_password FROM users WHERE email = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const removeUsers = `-- name: RemoveUsers :exec
DELETE FROM users
RETURNING id, created_at, updated_at, email, hashed_password
`

func (q *Queries) RemoveUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeUsers)
	return err
}
